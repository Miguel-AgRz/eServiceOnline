@using eServiceOnline.Models.ProductHaul
@model eServiceOnline.Models.ProductHaul.RescheduleBlendFromBulkPlantBinModel

@{
    Layout = null;
}

@using (Html.BeginForm("RescheduleBlendFromRigBin", "ProductHaul", FormMethod.Post, new { enctype = "multipart/form-data" }))
{


    @Html.HiddenFor(m => m.ProductHaulLoadId)
    <div class="sj_dialog_body sj_lsd_ud">


        @Html.Partial("_CustomerProgramJobBaseBlendHeader", Model.ProductLoadInfoModel, new ViewDataDictionary(ViewData) { { "isStatic", true } })
        @Html.Partial("_TonnageAmountWaterControls", Model.ProductLoadInfoModel)
        @Html.Partial("_BlendTestCheckNew", Model.ProductLoadInfoModel, new ViewDataDictionary(ViewData) { { "isStatic", false } })
        @Html.Partial("_BulkPlant", Model.ProductLoadInfoModel, new ViewDataDictionary(ViewData) { { "isStatic", true } })
        @Html.Partial("_CommentsTexArea", Model.ProductLoadInfoModel)

    </div>
    @Html.Partial("_SubmitButton", Model)
}

@Html.Partial("_Dialogs")

<script>
    var existingHaul, blendTest, scheduleValidations, thirdParty;

    $(function () {
        /*
                existingHaul = new ExistingHaul();
                thirdParty = new ThirdParty();
                */
        var initSchedule = new InitSchedule(function () {
            /*
                        //defaultOnBlendTestClick(true);
                        existingHaul.setExistingHaul();
                        //loadRigBins();
                        thirdParty.getThirdParty();
                        $('#IsGoWithCrew').prop("disabled", true);
            */
            loadBulkPlants();
            $('#IsBlendTest').prop("disabled", true);
            InitializeDialogs();
        });


        //#region validation
        //        var val0 = new ValidationsChain(true, validateRequiredBlend);
        var val1 = new ValidationsChain(true, validateRequiredAmount);
        /*
        var val2 = new ValidationsChain(true, validateBulkPlant);
        var val3 = new ValidationsChain(true, validateBin, function () { return !$("#IsGoWithCrew").prop("checked") });
        var val4 = new ValidationsChain(true, validateExistingHaul, function () { return !$("#IsBlendTest").prop("checked") && $("#IsExistingHaul").prop("checked") });
        var val5 = new ValidationsChain(true, validateCrew, function () { return !$("#IsBlendTest").prop("checked") });
        var val6 = new ValidationsChain(true, validateExpectedLocationTime, function () { return !$("#IsBlendTest").prop("checked") && !$("#IsGoWithCrew").prop("checked") });
        var val7 = new ValidationsChain(true, validateJobDuration, function () { return !$("#IsBlendTest").prop("checked") && !$("#IsGoWithCrew").prop("checked") && !$("#IsExistingHaul").prop("checked") });

        scheduleChainValidation = new ValidationsChain(true, validateSchedule, function (stateObj) { return !$("#IsBlendTest").prop("checked") && !$("#IsExistingHaul").prop("checked"); }, null, dataScheduleValidation);
        */
        qualityOfTheBinChainValidation = new ValidationsChain(true, VerifyQualityOfTheBin, undefined, undefined, dataQualityOfTheBin);
        amountAndMixWaterChainValidation = new ValidationsChain(true, verifyAmountAndMixWater, undefined, undefined, dataAmountAndMixWater);

        /*        val0.setNextFuncOrValidation(val1);
                val1.setNextFuncOrValidation(val2);
                val2.setNextFuncOrValidation(val3);
                val3.setNextFuncOrValidation(val4);
                val4.setNextFuncOrValidation(val5);
                val5.setNextFuncOrValidation(val6);
                val6.setNextFuncOrValidation(val7);
                val7.setNextFuncOrValidation(scheduleChainValidation);*/
        val1.setNextFuncOrValidation(qualityOfTheBinChainValidation);
        qualityOfTheBinChainValidation.setNextFuncOrValidation(amountAndMixWaterChainValidation);

        scheduleValidations = new ValidationsBuilder(val1);
        //#endregion

        initSchedule.Initialize();
    });
</script>